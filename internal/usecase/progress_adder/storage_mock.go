// Code generated by mockery v2.46.3. DO NOT EDIT.

package progress_adder

import (
	context "context"
	entities "testing_trainer/internal/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// AddProgressLog provides a mock function with given fields: ctx, goalId, createdAt
func (_m *MockStorage) AddProgressLog(ctx context.Context, goalId int, createdAt time.Time) error {
	ret := _m.Called(ctx, goalId, createdAt)

	if len(ret) == 0 {
		panic("no return value specified for AddProgressLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time) error); ok {
		r0 = rf(ctx, goalId, createdAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyProgressChangeBySnapshotID provides a mock function with given fields: ctx, snapshotID, progressChange
func (_m *MockStorage) ApplyProgressChangeBySnapshotID(ctx context.Context, snapshotID int64, progressChange entities.ProgressChange) error {
	ret := _m.Called(ctx, snapshotID, progressChange)

	if len(ret) == 0 {
		panic("no return value specified for ApplyProgressChangeBySnapshotID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entities.ProgressChange) error); ok {
		r0 = rf(ctx, snapshotID, progressChange)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProgress provides a mock function with given fields: ctx, _a1
func (_m *MockStorage) CreateProgress(ctx context.Context, _a1 entities.Progress) (int64, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProgress")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Progress) (int64, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Progress) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Progress) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, snapshot
func (_m *MockStorage) CreateSnapshot(ctx context.Context, snapshot entities.ProgressSnapshot) error {
	ret := _m.Called(ctx, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ProgressSnapshot) error); ok {
		r0 = rf(ctx, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUserHabitsWithGoals provides a mock function with given fields: ctx, username
func (_m *MockStorage) GetAllUserHabitsWithGoals(ctx context.Context, username string) ([]entities.Habit, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserHabitsWithGoals")
	}

	var r0 []entities.Habit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entities.Habit, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Habit); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Habit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentDayExecutionCount provides a mock function with given fields: ctx, goal, currentTime
func (_m *MockStorage) GetCurrentDayExecutionCount(ctx context.Context, goal entities.Goal, currentTime time.Time) (int, error) {
	ret := _m.Called(ctx, goal, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentDayExecutionCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Goal, time.Time) (int, error)); ok {
		return rf(ctx, goal, currentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Goal, time.Time) int); ok {
		r0 = rf(ctx, goal, currentTime)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Goal, time.Time) error); ok {
		r1 = rf(ctx, goal, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentPeriodExecutionCount provides a mock function with given fields: ctx, goal, currentTime
func (_m *MockStorage) GetCurrentPeriodExecutionCount(ctx context.Context, goal entities.Goal, currentTime time.Time) (int, error) {
	ret := _m.Called(ctx, goal, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentPeriodExecutionCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Goal, time.Time) (int, error)); ok {
		return rf(ctx, goal, currentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Goal, time.Time) int); ok {
		r0 = rf(ctx, goal, currentTime)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Goal, time.Time) error); ok {
		r1 = rf(ctx, goal, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentProgress provides a mock function with given fields: ctx, goalId
func (_m *MockStorage) GetCurrentProgress(ctx context.Context, goalId int) (entities.Progress, error) {
	ret := _m.Called(ctx, goalId)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentProgress")
	}

	var r0 entities.Progress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entities.Progress, error)); ok {
		return rf(ctx, goalId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entities.Progress); ok {
		r0 = rf(ctx, goalId)
	} else {
		r0 = ret.Get(0).(entities.Progress)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, goalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentSnapshot provides a mock function with given fields: ctx, username, goalID, currentTime
func (_m *MockStorage) GetCurrentSnapshot(ctx context.Context, username string, goalID int, currentTime time.Time) (entities.ProgressSnapshot, error) {
	ret := _m.Called(ctx, username, goalID, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSnapshot")
	}

	var r0 entities.ProgressSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Time) (entities.ProgressSnapshot, error)); ok {
		return rf(ctx, username, goalID, currentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Time) entities.ProgressSnapshot); ok {
		r0 = rf(ctx, username, goalID, currentTime)
	} else {
		r0 = ret.Get(0).(entities.ProgressSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, time.Time) error); ok {
		r1 = rf(ctx, username, goalID, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFutureSnapshots provides a mock function with given fields: ctx, username, goalID, currentTime
func (_m *MockStorage) GetFutureSnapshots(ctx context.Context, username string, goalID int, currentTime time.Time) ([]entities.ProgressSnapshot, error) {
	ret := _m.Called(ctx, username, goalID, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for GetFutureSnapshots")
	}

	var r0 []entities.ProgressSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Time) ([]entities.ProgressSnapshot, error)); ok {
		return rf(ctx, username, goalID, currentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Time) []entities.ProgressSnapshot); ok {
		r0 = rf(ctx, username, goalID, currentTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ProgressSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, time.Time) error); ok {
		r1 = rf(ctx, username, goalID, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHabitById provides a mock function with given fields: ctx, username, habitId
func (_m *MockStorage) GetHabitById(ctx context.Context, username string, habitId int) (entities.Habit, error) {
	ret := _m.Called(ctx, username, habitId)

	if len(ret) == 0 {
		panic("no return value specified for GetHabitById")
	}

	var r0 entities.Habit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (entities.Habit, error)); ok {
		return rf(ctx, username, habitId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) entities.Habit); ok {
		r0 = rf(ctx, username, habitId)
	} else {
		r0 = ret.Get(0).(entities.Habit)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, username, habitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHabitGoal provides a mock function with given fields: ctx, habitId
func (_m *MockStorage) GetHabitGoal(ctx context.Context, habitId int) (entities.Goal, error) {
	ret := _m.Called(ctx, habitId)

	if len(ret) == 0 {
		panic("no return value specified for GetHabitGoal")
	}

	var r0 entities.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entities.Goal, error)); ok {
		return rf(ctx, habitId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entities.Goal); ok {
		r0 = rf(ctx, habitId)
	} else {
		r0 = ret.Get(0).(entities.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, habitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostRecentSnapshot provides a mock function with given fields: ctx, username, goalID, currentTime
func (_m *MockStorage) GetMostRecentSnapshot(ctx context.Context, username string, goalID int, currentTime time.Time) (entities.ProgressSnapshot, error) {
	ret := _m.Called(ctx, username, goalID, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentSnapshot")
	}

	var r0 entities.ProgressSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Time) (entities.ProgressSnapshot, error)); ok {
		return rf(ctx, username, goalID, currentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, time.Time) entities.ProgressSnapshot); ok {
		r0 = rf(ctx, username, goalID, currentTime)
	} else {
		r0 = ret.Get(0).(entities.ProgressSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, time.Time) error); ok {
		r1 = rf(ctx, username, goalID, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreviousPeriodExecutionCount provides a mock function with given fields: ctx, goal, currentTime
func (_m *MockStorage) GetPreviousPeriodExecutionCount(ctx context.Context, goal entities.Goal, currentTime time.Time) (int, error) {
	ret := _m.Called(ctx, goal, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousPeriodExecutionCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Goal, time.Time) (int, error)); ok {
		return rf(ctx, goal, currentTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Goal, time.Time) int); ok {
		r0 = rf(ctx, goal, currentTime)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Goal, time.Time) error); ok {
		r1 = rf(ctx, goal, currentTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProgressByID provides a mock function with given fields: ctx, progressID
func (_m *MockStorage) GetProgressByID(ctx context.Context, progressID int64) (entities.Progress, error) {
	ret := _m.Called(ctx, progressID)

	if len(ret) == 0 {
		panic("no return value specified for GetProgressByID")
	}

	var r0 entities.Progress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entities.Progress, error)); ok {
		return rf(ctx, progressID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entities.Progress); ok {
		r0 = rf(ctx, progressID)
	} else {
		r0 = ret.Get(0).(entities.Progress)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, progressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGoalCompleted provides a mock function with given fields: ctx, goalId
func (_m *MockStorage) SetGoalCompleted(ctx context.Context, goalId int) error {
	ret := _m.Called(ctx, goalId)

	if len(ret) == 0 {
		panic("no return value specified for SetGoalCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, goalId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGoalNextCheckDate provides a mock function with given fields: ctx, goalId, nextCheckDate
func (_m *MockStorage) SetGoalNextCheckDate(ctx context.Context, goalId int, nextCheckDate time.Time) error {
	ret := _m.Called(ctx, goalId, nextCheckDate)

	if len(ret) == 0 {
		panic("no return value specified for SetGoalNextCheckDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time) error); ok {
		r0 = rf(ctx, goalId, nextCheckDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProgressByID provides a mock function with given fields: ctx, _a1
func (_m *MockStorage) UpdateProgressByID(ctx context.Context, _a1 entities.Progress) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgressByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Progress) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
