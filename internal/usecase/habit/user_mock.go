// Code generated by mockery v2.46.3. DO NOT EDIT.

package habit

import (
	context "context"
	entities "testing_trainer/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUserUseCase is an autogenerated mock type for the UserUseCase type
type MockUserUseCase struct {
	mock.Mock
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserUseCase) GetUserByUsername(ctx context.Context, username string) (entities.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUserUseCase creates a new instance of MockUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUseCase {
	mock := &MockUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
